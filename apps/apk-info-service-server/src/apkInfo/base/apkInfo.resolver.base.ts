/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApkInfo } from "./ApkInfo";
import { ApkInfoCountArgs } from "./ApkInfoCountArgs";
import { ApkInfoFindManyArgs } from "./ApkInfoFindManyArgs";
import { ApkInfoFindUniqueArgs } from "./ApkInfoFindUniqueArgs";
import { CreateApkInfoArgs } from "./CreateApkInfoArgs";
import { UpdateApkInfoArgs } from "./UpdateApkInfoArgs";
import { DeleteApkInfoArgs } from "./DeleteApkInfoArgs";
import { ApkInfoService } from "../apkInfo.service";
@graphql.Resolver(() => ApkInfo)
export class ApkInfoResolverBase {
  constructor(protected readonly service: ApkInfoService) {}

  async _apkInfosMeta(
    @graphql.Args() args: ApkInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApkInfo])
  async apkInfos(
    @graphql.Args() args: ApkInfoFindManyArgs
  ): Promise<ApkInfo[]> {
    return this.service.apkInfos(args);
  }

  @graphql.Query(() => ApkInfo, { nullable: true })
  async apkInfo(
    @graphql.Args() args: ApkInfoFindUniqueArgs
  ): Promise<ApkInfo | null> {
    const result = await this.service.apkInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApkInfo)
  async createApkInfo(
    @graphql.Args() args: CreateApkInfoArgs
  ): Promise<ApkInfo> {
    return await this.service.createApkInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApkInfo)
  async updateApkInfo(
    @graphql.Args() args: UpdateApkInfoArgs
  ): Promise<ApkInfo | null> {
    try {
      return await this.service.updateApkInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApkInfo)
  async deleteApkInfo(
    @graphql.Args() args: DeleteApkInfoArgs
  ): Promise<ApkInfo | null> {
    try {
      return await this.service.deleteApkInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
