/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApkInfoService } from "../apkInfo.service";
import { ApkInfoCreateInput } from "./ApkInfoCreateInput";
import { ApkInfo } from "./ApkInfo";
import { ApkInfoFindManyArgs } from "./ApkInfoFindManyArgs";
import { ApkInfoWhereUniqueInput } from "./ApkInfoWhereUniqueInput";
import { ApkInfoUpdateInput } from "./ApkInfoUpdateInput";

export class ApkInfoControllerBase {
  constructor(protected readonly service: ApkInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApkInfo })
  async createApkInfo(
    @common.Body() data: ApkInfoCreateInput
  ): Promise<ApkInfo> {
    return await this.service.createApkInfo({
      data: data,
      select: {
        applicationLabel: true,
        createdAt: true,
        icon: true,
        id: true,
        launchableActivity: true,
        packageName: true,
        permissions: true,
        sdkVersion: true,
        targetSdkVersion: true,
        updatedAt: true,
        versionCode: true,
        versionName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApkInfo] })
  @ApiNestedQuery(ApkInfoFindManyArgs)
  async apkInfos(@common.Req() request: Request): Promise<ApkInfo[]> {
    const args = plainToClass(ApkInfoFindManyArgs, request.query);
    return this.service.apkInfos({
      ...args,
      select: {
        applicationLabel: true,
        createdAt: true,
        icon: true,
        id: true,
        launchableActivity: true,
        packageName: true,
        permissions: true,
        sdkVersion: true,
        targetSdkVersion: true,
        updatedAt: true,
        versionCode: true,
        versionName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApkInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apkInfo(
    @common.Param() params: ApkInfoWhereUniqueInput
  ): Promise<ApkInfo | null> {
    const result = await this.service.apkInfo({
      where: params,
      select: {
        applicationLabel: true,
        createdAt: true,
        icon: true,
        id: true,
        launchableActivity: true,
        packageName: true,
        permissions: true,
        sdkVersion: true,
        targetSdkVersion: true,
        updatedAt: true,
        versionCode: true,
        versionName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApkInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApkInfo(
    @common.Param() params: ApkInfoWhereUniqueInput,
    @common.Body() data: ApkInfoUpdateInput
  ): Promise<ApkInfo | null> {
    try {
      return await this.service.updateApkInfo({
        where: params,
        data: data,
        select: {
          applicationLabel: true,
          createdAt: true,
          icon: true,
          id: true,
          launchableActivity: true,
          packageName: true,
          permissions: true,
          sdkVersion: true,
          targetSdkVersion: true,
          updatedAt: true,
          versionCode: true,
          versionName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApkInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApkInfo(
    @common.Param() params: ApkInfoWhereUniqueInput
  ): Promise<ApkInfo | null> {
    try {
      return await this.service.deleteApkInfo({
        where: params,
        select: {
          applicationLabel: true,
          createdAt: true,
          icon: true,
          id: true,
          launchableActivity: true,
          packageName: true,
          permissions: true,
          sdkVersion: true,
          targetSdkVersion: true,
          updatedAt: true,
          versionCode: true,
          versionName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
